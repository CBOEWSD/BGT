
/*
   * RowTV
  This adds functionality to the row subcomponent of the TV widget.

  NOTE:
    This file contains purely superficial functionality. At this time there
    is no interaction with a service. This code should be taken as guidance
    for UX interaction and not as the basis for application code.
 */

(function() {
  var RowTV;

  RowTV = (function() {
    var self;

    self = void 0;


    /*
     *# Constructor
     */

    function RowTV(el) {
      self = this;
      this.$el = $(el);
      this.$items = $('.items', el);
      this.$item = $('.item', this.$items);
      this.$showWithAll = $('.items .showWithAll', el);
      this.subscribe = this.$el.data('subscribe') || void 0;
      this.$allOtherRows = $('.widget-tv.row').not(el);
      this.$publishers = $("[data-publish='" + this.subscribe + "']");
      this.$resetPublishers = $("[data-publish='resetRows']");
      this.$resetPublishers.addClass('shown');
      this.bindShowAll();
      return this;
    }


    /*
     *# this.bindShowAll
    Binds show all type actions with their appropriate methods.
     */

    RowTV.prototype.bindShowAll = function() {
      this.$viewAll = $('.viewall', this.$el);
      this.$total = $('.total', this.$el);
      this.$viewAll.bind('click', (function(_this) {
        return function(e) {
          return _this.actionToggleMe(e);
        };
      })(this));
      if (this.subscribe) {
        PubSub.subscribe(this.subscribe, (function(_this) {
          return function(event, from) {
            return _this.actionToggleAll();
          };
        })(this));
      }
      PubSub.subscribe('resetRows', (function(_this) {
        return function() {
          return _this.$el.trigger('reset');
        };
      })(this));
      this.$el.bind('reset', (function(_this) {
        return function() {
          _this.$el.slideDown();
          _this.$resetPublishers.addClass('shown');
          return _this.actionHideAll(false);
        };
      })(this));
      this.$el.bind('resetfilter', (function(_this) {
        return function() {
          return _this.actionHideAll(false);
        };
      })(this));
      if (this.$el.data('activestates')) {
        this.$item.bind('click', (function(_this) {
          return function(e) {
            e.preventDefault();
            return PubSub.publish('row-active-item', e.currentTarget);
          };
        })(this));
        PubSub.subscribe('row-active-item', (function(_this) {
          return function(e, item) {
            return _this.actionActiveItem(e, item);
          };
        })(this));
        return PubSub.subscribe('row-active-item-reset', (function(_this) {
          return function(e, item) {
            return _this.resetActiveItem(e, item);
          };
        })(this));
      }
    };


    /*
     *# this.actionToggleAll
    Called when all should be revealed or hidden for a certain category.
     */

    RowTV.prototype.actionToggleAll = function(e) {
      if (e) {
        e.preventDefault();
      }
      if (this.$el.hasClass('shown') && this.$el.is(':visible')) {
        return this.actionHideAll(true);
      } else {
        return this.actionShowAll();
      }
    };

    RowTV.prototype.actionShowAll = function() {
      this.$viewAll.hide();
      this.actionShowMe();
      this.showJustMe();
      this.$el.addClass('shown');
      this.$publishers.addClass('shown');
      this.$resetPublishers.removeClass('shown');
      return this.$allOtherRows.trigger('resetfilter');
    };

    RowTV.prototype.actionHideAll = function(trigger) {
      this.$viewAll.show();
      this.actionHideMe();
      this.$el.removeClass('shown');
      this.$publishers.removeClass('shown');
      if (trigger) {
        return this.$allOtherRows.trigger('reset');
      }
    };

    RowTV.prototype.actionToggleMe = function(e) {
      if (e) {
        e.preventDefault();
      }
      if (this.$viewAll.hasClass('shown') && this.$el.is(':visible')) {
        return this.actionHideMe();
      } else {
        return this.actionShowMe();
      }
    };

    RowTV.prototype.actionShowMe = function() {
      $('.item:hidden:first', this.$items).nextAll().andSelf().fadeIn();
      this.$showWithAll.fadeIn();
      this.$viewAll.addClass('shown');
      return this.$items.addClass('expanded');
    };

    RowTV.prototype.actionHideMe = function() {
      $('.item:nth-child(n+5)', this.$items).fadeOut();
      this.$showWithAll.fadeOut();
      this.$items.removeClass('expanded');
      return this.$viewAll.removeClass('shown');
    };


    /*
     *# this.actionNextFour
    Can show only 4 new items for a given category.
     */

    RowTV.prototype.actionNextFour = function(e) {
      e.preventDefault();
      return $('.item:hidden:first', this.$items).nextAll(".item:lt(3)").andSelf().fadeIn();
    };


    /*
     *# this.showJustMe
    This method will hide all other `.widget-tv.row` other than `this.$el`
     */

    RowTV.prototype.showJustMe = function() {
      this.$allOtherRows.slideUp(500, function() {
        return PubSub.publish('LazyLoadPoll');
      });
      this.$el.slideDown(500, function() {
        return PubSub.publish('LazyLoadPoll');
      });
      this.dontResetMe = true;
      return PubSub.publish('tv-rows-reset');
    };

    RowTV.prototype.showEveryone = function() {
      return this.$allOtherRows.slideDown(500, function() {
        return PubSub.publish('LazyLoadPoll');
      });
    };

    RowTV.prototype.actionActiveItem = function(e, item) {
      if (this.$el.has(item).length < 1) {
        return true;
      }
      PubSub.publish('row-active-item-reset', item);
      return $(item).addClass('active');
    };

    RowTV.prototype.resetActiveItem = function(e, item) {
      return this.$item.not(item).removeClass('active');
    };

    return RowTV;

  })();


  /*
     *# Module definition
    Called by require.
   */

  define(function() {
    return RowTV;
  });

}).call(this);

//@ sourceMappingURL=data:application/json;base64,