// Inspired by https://github.com/twigkit/semantic.gs/blob/master/stylesheets/scss/grid.scss

@mixin clearfixs() {
  *zoom:1;
  &:before, &:after { content: " "; display: table; }
  &:after { clear: both; }
}

  // Giant row mixin for fullscreen rows

  @mixin giganticRow() {
    width: $rowgigangticWidth; max-width: 100%; min-width: $screenSmall; margin: 0 auto; @include clearfixs;
    @include respondTo(smallScreen) { width: auto; min-width: 0; margin-left: 0; margin-right: 0; }
  }


  // Outer row mixin for container rows

  @mixin outerRow() {
    width: $rowWidth; max-width: 100%; min-width: $screenSmall; margin: 0 auto; @include clearfixs;
    @media screen and (max-width: $screenSmall - 1) {
      min-width: 0px;
      width: 100%;
    }
  }

  // Inner row mixin for nested rows, must be a child of an outer-row element. $behavior can be 'collapse' to get rid of margins

  @mixin innerRow($behavior: false) {
      @if $behavior == collapse { @include row-i-base; margin: 0; @include clearfixs;
    } @else                     { @include row-i-base; margin: 0 (-($columnGutter/2)); @include clearfixs; }
  }

  // Columns mixin, syntax is ($columns, $behavior). Behavior can be 'centered' which centers things or 'collapse' which collapses the gutters. ex @include row(4,[center | collapse])

  @mixin column($columns:$columns, $behavior: false) {
      @if      $behavior == center   { @include fl-n; margin-left: auto; margin-right: auto; @include c-base; width: gridCalc($columns, $totalColumns); @include respondTo(smallScreen) { float: none; width: auto; }
    } @else if $behavior == collapse { @include fl-l; @include c-base; padding: 0; width: gridCalc($columns, $totalColumns); @include respondTo(smallScreen) { float: none; width: auto; }
    } @else                          { @include fl-l; @include c-base; width: gridCalc($columns, $totalColumns); @include respondTo(smallScreen) { float: none; width: auto; } }
  }

  // Offset Mixin, include after a column mixin to manipulate its grid offset.

  @mixin offsetBy($offset:1) { margin-left: gridCalc($offset, $totalColumns); }

  // Push/Pull Mixins, include after a column mixin to manipulate stack ordering.

  @mixin push($push:1) { left: gridCalc($push, $totalColumns); }
  @mixin pull($push:1) { right: gridCalc($push, $totalColumns); }

  // Mobile Row, synctax is @include mobile-row(); (This mixin isn't really necessary, will be deprecated in 4)
  @mixin mobileRow() { @include respondTo(smallScreen) { width: auto; min-width: 0; margin-left: 0; margin-right: 0; @include clearfix(); } }

  // Mobile Columns, syntax is @include mobile-column(#);

  @mixin mobileColumn($columns:$columns, $behavior: false) {
      @if      $behavior == center   { @include respondTo(smallScreen) { float: none; margin: 0 auto; position: relative; min-height: 1px; padding: 0 ($columnGutter/2); width: gridCalc($columns, $mobileTotalColumns); }
    } @else if $behavior == collapse { @include respondTo(smallScreen) { float: left; position: relative; min-height: 1px; padding: 0; width: gridCalc($columns, $mobileTotalColumns); }
    } @else                          { @include respondTo(smallScreen) { float: left; width: gridCalc($columns, $mobileTotalColumns); padding: 0 ($columnGutter/2); } }
  }

  // Mobile Push/Pull Mixin

  @mixin mobilePush($push:1) { @include respondTo(smallScreen) { left: gridCalc($push, $mobileTotalColumns); } }
  @mixin mobilePull($push:1) { @include respondTo(smallScreen) { right: gridCalc($push, $mobileTotalColumns); } }

  // Invisible Placeholder Classes for Grid
  @mixin fl-l { float: left; }
  @mixin fl-r { float: right; }
  @mixin fl-n { float: none; }

  @mixin clearfix { @include clearfix(); }
  // %clearfix-m { @include mobileClearfix(); }

  @mixin row-o { @include outerRow(); }
  @mixin row-i-base { width: auto; max-width: none; min-width: 0; }
  @mixin row-i { @include innerRow(); }

  @mixin c-base { position: relative; min-height: 1px; padding: 0 ($columnGutter/2); }

  //@for $i from 1 through $totalColumns {
  //  %c-#{$i} { @include column($i); }
  //}